name: Build and Push Docker Image to GHCR
on:
  push:  # Triggers the workflow on push events to the main branch
    branches:
      - main
  schedule:  # Optional: Schedule the job to run daily
    - cron: '0 0 * * *'  # Fixed cron syntax
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  check_and_build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4  # Updated to latest version
      
    - name: Get latest Sonarr container release version
      id: get_release
      run: |
        # Debug: First check the API response
        echo "Fetching package versions..."
        response=$(curl -s -H "Accept: application/vnd.github+json" \
          -u "${{ github.actor }}:${{ secrets.GHCR_TOKEN }}" \
          "https://api.github.com/orgs/hotio/packages/container/sonarr/versions")
        
        echo "API Response received, processing..."
        
        # Extract version - search through ALL versions for release tags
        latest_version=$(echo "$response" | \
          jq -r '.[] | select(.metadata.container.tags[]? | test("^release-[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$")) | .metadata.container.tags[] | select(test("^release-[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$"))' | \
          sed 's/release-//' | head -n1)
        
        if [ -z "$latest_version" ]; then
          echo "Failed to extract version from API response"
          echo "Looking for release tags in response..."
          echo "$response" | jq -r '.[] | .metadata.container.tags[]?' | grep -E "^release-" | head -5
          exit 1
        fi
        
        echo "Latest version found: $latest_version"
        echo "latest_version=$latest_version" >> $GITHUB_OUTPUT
        echo "latest_version=$latest_version" >> $GITHUB_ENV
        
    - name: Check existing image
      id: check_image
      run: |
        existing_version=$(curl -s -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
          "https://api.github.com/user/packages/container/sonarr-mkvtoolnix/versions" | \
          jq -r '.[0].metadata.container.tags[] | select(. != "latest")' | head -n1)
        
        echo "Existing version: $existing_version"
        echo "Latest version: ${{ steps.get_release.outputs.latest_version }}"
        
        if [ "$existing_version" = "${{ steps.get_release.outputs.latest_version }}" ]; then
          echo "Image is up to date. Skipping build."
          echo "skip_build=true" >> $GITHUB_OUTPUT
          echo "skip_build=true" >> $GITHUB_ENV
        else
          echo "New version detected. Proceeding with build."
          echo "skip_build=false" >> $GITHUB_OUTPUT
          echo "skip_build=false" >> $GITHUB_ENV
        fi
        
    - name: Set up Docker Buildx
      if: steps.check_image.outputs.skip_build == 'false'
      uses: docker/setup-buildx-action@v3  # Updated to latest version
      
    - name: Login to GHCR
      if: steps.check_image.outputs.skip_build == 'false'
      uses: docker/login-action@v3  # Using the official login action
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
        
    - name: Build and Tag Docker Image
      if: steps.check_image.outputs.skip_build == 'false'
      run: |
        echo "Building Docker image for version: ${{ steps.get_release.outputs.latest_version }}"
        docker build . \
          -t ghcr.io/${{ github.repository }}:${{ steps.get_release.outputs.latest_version }} \
          -t ghcr.io/${{ github.repository }}:latest
          
    - name: Push Version Tag
      if: steps.check_image.outputs.skip_build == 'false'
      run: docker push ghcr.io/${{ github.repository }}:${{ steps.get_release.outputs.latest_version }}
      
    - name: Push Latest Tag
      if: steps.check_image.outputs.skip_build == 'false'
      run: docker push ghcr.io/${{ github.repository }}:latest
      
    - name: Send Gotify Notification
      if: steps.check_image.outputs.skip_build == 'false'
      run: |
        curl -X POST \
          -H "Waf-bypass: ${{ secrets.WAF_BYPASS }}" \
          -F "title=New Docker Image Pushed" \
          -F "message=A new Docker image for sonarr-mkvtoolnix version ${{ steps.get_release.outputs.latest_version }} has been pushed to GHCR." \
          ${{ secrets.GOTIFY_WEBHOOK_URL }}
